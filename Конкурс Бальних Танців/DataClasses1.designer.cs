#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Конкурс_Бальних_Танців
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="КБТ")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDance(Dance instance);
    partial void UpdateDance(Dance instance);
    partial void DeleteDance(Dance instance);
    partial void InsertDancer(Dancer instance);
    partial void UpdateDancer(Dancer instance);
    partial void DeleteDancer(Dancer instance);
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertJudge(Judge instance);
    partial void UpdateJudge(Judge instance);
    partial void DeleteJudge(Judge instance);
    partial void InsertPair(Pair instance);
    partial void UpdatePair(Pair instance);
    partial void DeletePair(Pair instance);
    partial void InsertPerformance(Performance instance);
    partial void UpdatePerformance(Performance instance);
    partial void DeletePerformance(Performance instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Конкурс_Бальних_Танців.Properties.Settings.Default.КБТConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dance> Dances
		{
			get
			{
				return this.GetTable<Dance>();
			}
		}
		
		public System.Data.Linq.Table<Dancer> Dancers
		{
			get
			{
				return this.GetTable<Dancer>();
			}
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<Judge> Judges
		{
			get
			{
				return this.GetTable<Judge>();
			}
		}
		
		public System.Data.Linq.Table<Pair> Pairs
		{
			get
			{
				return this.GetTable<Pair>();
			}
		}
		
		public System.Data.Linq.Table<Performance> Performances
		{
			get
			{
				return this.GetTable<Performance>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dance")]
	public partial class Dance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _danceID;
		
		private string _dance_name;
		
		private string _dance_type;
		
		private EntitySet<Grade> _Grades;
		
		private EntitySet<Performance> _Performances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndanceIDChanging(int value);
    partial void OndanceIDChanged();
    partial void Ondance_nameChanging(string value);
    partial void Ondance_nameChanged();
    partial void Ondance_typeChanging(string value);
    partial void Ondance_typeChanged();
    #endregion
		
		public Dance()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Performances = new EntitySet<Performance>(new Action<Performance>(this.attach_Performances), new Action<Performance>(this.detach_Performances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_danceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int danceID
		{
			get
			{
				return this._danceID;
			}
			set
			{
				if ((this._danceID != value))
				{
					this.OndanceIDChanging(value);
					this.SendPropertyChanging();
					this._danceID = value;
					this.SendPropertyChanged("danceID");
					this.OndanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dance_name", DbType="VarChar(50)")]
		public string dance_name
		{
			get
			{
				return this._dance_name;
			}
			set
			{
				if ((this._dance_name != value))
				{
					this.Ondance_nameChanging(value);
					this.SendPropertyChanging();
					this._dance_name = value;
					this.SendPropertyChanged("dance_name");
					this.Ondance_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dance_type", DbType="VarChar(50)")]
		public string dance_type
		{
			get
			{
				return this._dance_type;
			}
			set
			{
				if ((this._dance_type != value))
				{
					this.Ondance_typeChanging(value);
					this.SendPropertyChanging();
					this._dance_type = value;
					this.SendPropertyChanged("dance_type");
					this.Ondance_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dance_Grade", Storage="_Grades", ThisKey="danceID", OtherKey="danceID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dance_Performance", Storage="_Performances", ThisKey="danceID", OtherKey="danceID")]
		public EntitySet<Performance> Performances
		{
			get
			{
				return this._Performances;
			}
			set
			{
				this._Performances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Dance = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Dance = null;
		}
		
		private void attach_Performances(Performance entity)
		{
			this.SendPropertyChanging();
			entity.Dance = this;
		}
		
		private void detach_Performances(Performance entity)
		{
			this.SendPropertyChanging();
			entity.Dance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dancer")]
	public partial class Dancer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dancerID;
		
		private string _dancer_name;
		
		private string _dancer_surname;
		
		private System.Nullable<int> _dancer_age;
		
		private string _mentor;
		
		private string _dancer_middleName;
		
		private EntitySet<Grade> _Grades;
		
		private EntitySet<Pair> _Pairs;
		
		private EntitySet<Pair> _Pairs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndancerIDChanging(int value);
    partial void OndancerIDChanged();
    partial void Ondancer_nameChanging(string value);
    partial void Ondancer_nameChanged();
    partial void Ondancer_surnameChanging(string value);
    partial void Ondancer_surnameChanged();
    partial void Ondancer_ageChanging(System.Nullable<int> value);
    partial void Ondancer_ageChanged();
    partial void OnmentorChanging(string value);
    partial void OnmentorChanged();
    partial void Ondancer_middleNameChanging(string value);
    partial void Ondancer_middleNameChanged();
    #endregion
		
		public Dancer()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Pairs = new EntitySet<Pair>(new Action<Pair>(this.attach_Pairs), new Action<Pair>(this.detach_Pairs));
			this._Pairs1 = new EntitySet<Pair>(new Action<Pair>(this.attach_Pairs1), new Action<Pair>(this.detach_Pairs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dancerID
		{
			get
			{
				return this._dancerID;
			}
			set
			{
				if ((this._dancerID != value))
				{
					this.OndancerIDChanging(value);
					this.SendPropertyChanging();
					this._dancerID = value;
					this.SendPropertyChanged("dancerID");
					this.OndancerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancer_name", DbType="VarChar(50)")]
		public string dancer_name
		{
			get
			{
				return this._dancer_name;
			}
			set
			{
				if ((this._dancer_name != value))
				{
					this.Ondancer_nameChanging(value);
					this.SendPropertyChanging();
					this._dancer_name = value;
					this.SendPropertyChanged("dancer_name");
					this.Ondancer_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancer_surname", DbType="VarChar(50)")]
		public string dancer_surname
		{
			get
			{
				return this._dancer_surname;
			}
			set
			{
				if ((this._dancer_surname != value))
				{
					this.Ondancer_surnameChanging(value);
					this.SendPropertyChanging();
					this._dancer_surname = value;
					this.SendPropertyChanged("dancer_surname");
					this.Ondancer_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancer_age", DbType="Int")]
		public System.Nullable<int> dancer_age
		{
			get
			{
				return this._dancer_age;
			}
			set
			{
				if ((this._dancer_age != value))
				{
					this.Ondancer_ageChanging(value);
					this.SendPropertyChanging();
					this._dancer_age = value;
					this.SendPropertyChanged("dancer_age");
					this.Ondancer_ageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mentor", DbType="VarChar(50)")]
		public string mentor
		{
			get
			{
				return this._mentor;
			}
			set
			{
				if ((this._mentor != value))
				{
					this.OnmentorChanging(value);
					this.SendPropertyChanging();
					this._mentor = value;
					this.SendPropertyChanged("mentor");
					this.OnmentorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancer_middleName", DbType="VarChar(50)")]
		public string dancer_middleName
		{
			get
			{
				return this._dancer_middleName;
			}
			set
			{
				if ((this._dancer_middleName != value))
				{
					this.Ondancer_middleNameChanging(value);
					this.SendPropertyChanging();
					this._dancer_middleName = value;
					this.SendPropertyChanged("dancer_middleName");
					this.Ondancer_middleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dancer_Grade", Storage="_Grades", ThisKey="dancerID", OtherKey="dancerID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dancer_Pair", Storage="_Pairs", ThisKey="dancerID", OtherKey="dancer1ID")]
		public EntitySet<Pair> Pairs
		{
			get
			{
				return this._Pairs;
			}
			set
			{
				this._Pairs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dancer_Pair1", Storage="_Pairs1", ThisKey="dancerID", OtherKey="dancer2ID")]
		public EntitySet<Pair> Pairs1
		{
			get
			{
				return this._Pairs1;
			}
			set
			{
				this._Pairs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Dancer = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Dancer = null;
		}
		
		private void attach_Pairs(Pair entity)
		{
			this.SendPropertyChanging();
			entity.Dancer = this;
		}
		
		private void detach_Pairs(Pair entity)
		{
			this.SendPropertyChanging();
			entity.Dancer = null;
		}
		
		private void attach_Pairs1(Pair entity)
		{
			this.SendPropertyChanging();
			entity.Dancer1 = this;
		}
		
		private void detach_Pairs1(Pair entity)
		{
			this.SendPropertyChanging();
			entity.Dancer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _gradeID;
		
		private System.Nullable<int> _judgeID;
		
		private System.Nullable<int> _performanceID;
		
		private System.Nullable<int> _pairID;
		
		private System.Nullable<int> _dancerID;
		
		private System.Nullable<int> _danceID;
		
		private System.Nullable<int> _gradeAmount;
		
		private EntityRef<Dance> _Dance;
		
		private EntityRef<Dancer> _Dancer;
		
		private EntityRef<Judge> _Judge;
		
		private EntityRef<Pair> _Pair;
		
		private EntityRef<Performance> _Performance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngradeIDChanging(int value);
    partial void OngradeIDChanged();
    partial void OnjudgeIDChanging(System.Nullable<int> value);
    partial void OnjudgeIDChanged();
    partial void OnperformanceIDChanging(System.Nullable<int> value);
    partial void OnperformanceIDChanged();
    partial void OnpairIDChanging(System.Nullable<int> value);
    partial void OnpairIDChanged();
    partial void OndancerIDChanging(System.Nullable<int> value);
    partial void OndancerIDChanged();
    partial void OndanceIDChanging(System.Nullable<int> value);
    partial void OndanceIDChanged();
    partial void OngradeAmountChanging(System.Nullable<int> value);
    partial void OngradeAmountChanged();
    #endregion
		
		public Grade()
		{
			this._Dance = default(EntityRef<Dance>);
			this._Dancer = default(EntityRef<Dancer>);
			this._Judge = default(EntityRef<Judge>);
			this._Pair = default(EntityRef<Pair>);
			this._Performance = default(EntityRef<Performance>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int gradeID
		{
			get
			{
				return this._gradeID;
			}
			set
			{
				if ((this._gradeID != value))
				{
					this.OngradeIDChanging(value);
					this.SendPropertyChanging();
					this._gradeID = value;
					this.SendPropertyChanged("gradeID");
					this.OngradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_judgeID", DbType="Int")]
		public System.Nullable<int> judgeID
		{
			get
			{
				return this._judgeID;
			}
			set
			{
				if ((this._judgeID != value))
				{
					if (this._Judge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnjudgeIDChanging(value);
					this.SendPropertyChanging();
					this._judgeID = value;
					this.SendPropertyChanged("judgeID");
					this.OnjudgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_performanceID", DbType="Int")]
		public System.Nullable<int> performanceID
		{
			get
			{
				return this._performanceID;
			}
			set
			{
				if ((this._performanceID != value))
				{
					if (this._Performance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnperformanceIDChanging(value);
					this.SendPropertyChanging();
					this._performanceID = value;
					this.SendPropertyChanged("performanceID");
					this.OnperformanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pairID", DbType="Int")]
		public System.Nullable<int> pairID
		{
			get
			{
				return this._pairID;
			}
			set
			{
				if ((this._pairID != value))
				{
					if (this._Pair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpairIDChanging(value);
					this.SendPropertyChanging();
					this._pairID = value;
					this.SendPropertyChanged("pairID");
					this.OnpairIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancerID", DbType="Int")]
		public System.Nullable<int> dancerID
		{
			get
			{
				return this._dancerID;
			}
			set
			{
				if ((this._dancerID != value))
				{
					if (this._Dancer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndancerIDChanging(value);
					this.SendPropertyChanging();
					this._dancerID = value;
					this.SendPropertyChanged("dancerID");
					this.OndancerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_danceID", DbType="Int")]
		public System.Nullable<int> danceID
		{
			get
			{
				return this._danceID;
			}
			set
			{
				if ((this._danceID != value))
				{
					if (this._Dance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndanceIDChanging(value);
					this.SendPropertyChanging();
					this._danceID = value;
					this.SendPropertyChanged("danceID");
					this.OndanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gradeAmount", DbType="Int")]
		public System.Nullable<int> gradeAmount
		{
			get
			{
				return this._gradeAmount;
			}
			set
			{
				if ((this._gradeAmount != value))
				{
					this.OngradeAmountChanging(value);
					this.SendPropertyChanging();
					this._gradeAmount = value;
					this.SendPropertyChanged("gradeAmount");
					this.OngradeAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dance_Grade", Storage="_Dance", ThisKey="danceID", OtherKey="danceID", IsForeignKey=true)]
		public Dance Dance
		{
			get
			{
				return this._Dance.Entity;
			}
			set
			{
				Dance previousValue = this._Dance.Entity;
				if (((previousValue != value) 
							|| (this._Dance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dance.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Dance.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._danceID = value.danceID;
					}
					else
					{
						this._danceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dancer_Grade", Storage="_Dancer", ThisKey="dancerID", OtherKey="dancerID", IsForeignKey=true)]
		public Dancer Dancer
		{
			get
			{
				return this._Dancer.Entity;
			}
			set
			{
				Dancer previousValue = this._Dancer.Entity;
				if (((previousValue != value) 
							|| (this._Dancer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dancer.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Dancer.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._dancerID = value.dancerID;
					}
					else
					{
						this._dancerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dancer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Judge_Grade", Storage="_Judge", ThisKey="judgeID", OtherKey="judgeID", IsForeignKey=true)]
		public Judge Judge
		{
			get
			{
				return this._Judge.Entity;
			}
			set
			{
				Judge previousValue = this._Judge.Entity;
				if (((previousValue != value) 
							|| (this._Judge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Judge.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Judge.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._judgeID = value.judgeID;
					}
					else
					{
						this._judgeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Judge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pair_Grade", Storage="_Pair", ThisKey="pairID", OtherKey="pairID", IsForeignKey=true)]
		public Pair Pair
		{
			get
			{
				return this._Pair.Entity;
			}
			set
			{
				Pair previousValue = this._Pair.Entity;
				if (((previousValue != value) 
							|| (this._Pair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pair.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Pair.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._pairID = value.pairID;
					}
					else
					{
						this._pairID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pair");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Performance_Grade", Storage="_Performance", ThisKey="performanceID", OtherKey="performanceID", IsForeignKey=true)]
		public Performance Performance
		{
			get
			{
				return this._Performance.Entity;
			}
			set
			{
				Performance previousValue = this._Performance.Entity;
				if (((previousValue != value) 
							|| (this._Performance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Performance.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Performance.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._performanceID = value.performanceID;
					}
					else
					{
						this._performanceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Performance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Judges")]
	public partial class Judge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _judgeID;
		
		private string _judge_surname;
		
		private string _judge_name;
		
		private string _judge_middleName;
		
		private string _judge_category;
		
		private EntitySet<Grade> _Grades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnjudgeIDChanging(int value);
    partial void OnjudgeIDChanged();
    partial void Onjudge_surnameChanging(string value);
    partial void Onjudge_surnameChanged();
    partial void Onjudge_nameChanging(string value);
    partial void Onjudge_nameChanged();
    partial void Onjudge_middleNameChanging(string value);
    partial void Onjudge_middleNameChanged();
    partial void Onjudge_categoryChanging(string value);
    partial void Onjudge_categoryChanged();
    #endregion
		
		public Judge()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_judgeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int judgeID
		{
			get
			{
				return this._judgeID;
			}
			set
			{
				if ((this._judgeID != value))
				{
					this.OnjudgeIDChanging(value);
					this.SendPropertyChanging();
					this._judgeID = value;
					this.SendPropertyChanged("judgeID");
					this.OnjudgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_judge_surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string judge_surname
		{
			get
			{
				return this._judge_surname;
			}
			set
			{
				if ((this._judge_surname != value))
				{
					this.Onjudge_surnameChanging(value);
					this.SendPropertyChanging();
					this._judge_surname = value;
					this.SendPropertyChanged("judge_surname");
					this.Onjudge_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_judge_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string judge_name
		{
			get
			{
				return this._judge_name;
			}
			set
			{
				if ((this._judge_name != value))
				{
					this.Onjudge_nameChanging(value);
					this.SendPropertyChanging();
					this._judge_name = value;
					this.SendPropertyChanged("judge_name");
					this.Onjudge_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_judge_middleName", DbType="VarChar(50)")]
		public string judge_middleName
		{
			get
			{
				return this._judge_middleName;
			}
			set
			{
				if ((this._judge_middleName != value))
				{
					this.Onjudge_middleNameChanging(value);
					this.SendPropertyChanging();
					this._judge_middleName = value;
					this.SendPropertyChanged("judge_middleName");
					this.Onjudge_middleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_judge_category", DbType="Nvarchar(50) NOT NULL")]
		public string judge_category
		{
			get
			{
				return this._judge_category;
			}
			set
			{
				if ((this._judge_category != value))
				{
					this.Onjudge_categoryChanging(value);
					this.SendPropertyChanging();
					this._judge_category = value;
					this.SendPropertyChanged("judge_category");
					this.Onjudge_categoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Judge_Grade", Storage="_Grades", ThisKey="judgeID", OtherKey="judgeID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Judge = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Judge = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pair")]
	public partial class Pair : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pairID;
		
		private int _dancer1ID;
		
		private int _dancer2ID;
		
		private int _arbitrary_programID;
		
		private int _main_programID;
		
		private string _team_name;
		
		private EntitySet<Grade> _Grades;
		
		private EntitySet<Performance> _Performances;
		
		private EntityRef<Dancer> _Dancer;
		
		private EntityRef<Dancer> _Dancer1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpairIDChanging(int value);
    partial void OnpairIDChanged();
    partial void Ondancer1IDChanging(int value);
    partial void Ondancer1IDChanged();
    partial void Ondancer2IDChanging(int value);
    partial void Ondancer2IDChanged();
    partial void Onarbitrary_programChanging(int value);
    partial void Onarbitrary_programChanged();
    partial void Onmain_programChanging(int value);
    partial void Onmain_programChanged();
    partial void Onteam_nameChanging(string value);
    partial void Onteam_nameChanged();
    #endregion
		
		public Pair()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Performances = new EntitySet<Performance>(new Action<Performance>(this.attach_Performances), new Action<Performance>(this.detach_Performances));
			this._Dancer = default(EntityRef<Dancer>);
			this._Dancer1 = default(EntityRef<Dancer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pairID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pairID
		{
			get
			{
				return this._pairID;
			}
			set
			{
				if ((this._pairID != value))
				{
					this.OnpairIDChanging(value);
					this.SendPropertyChanging();
					this._pairID = value;
					this.SendPropertyChanged("pairID");
					this.OnpairIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancer1ID", DbType="Int NOT NULL")]
		public int dancer1ID
		{
			get
			{
				return this._dancer1ID;
			}
			set
			{
				if ((this._dancer1ID != value))
				{
					if (this._Dancer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondancer1IDChanging(value);
					this.SendPropertyChanging();
					this._dancer1ID = value;
					this.SendPropertyChanged("dancer1ID");
					this.Ondancer1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dancer2ID", DbType="Int NOT NULL")]
		public int dancer2ID
		{
			get
			{
				return this._dancer2ID;
			}
			set
			{
				if ((this._dancer2ID != value))
				{
					if (this._Dancer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondancer2IDChanging(value);
					this.SendPropertyChanging();
					this._dancer2ID = value;
					this.SendPropertyChanged("dancer2ID");
					this.Ondancer2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_arbitrary_programID", DbType="Int NOT NULL", CanBeNull=false)]
		public int arbitrary_programID
		{
			get
			{
				return this._arbitrary_programID;
			}
			set
			{
				if ((this._arbitrary_programID != value))
				{
					this.Onarbitrary_programChanging(value);
					this.SendPropertyChanging();
					this._arbitrary_programID = value;
					this.SendPropertyChanged("arbitrary_programID");
					this.Onarbitrary_programChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_main_programID", DbType="Int NOT NULL", CanBeNull=false)]
		public int main_programID
		{
			get
			{
				return this._main_programID;
			}
			set
			{
				if ((this._main_programID != value))
				{
					this.Onmain_programChanging(value);
					this.SendPropertyChanging();
					this._main_programID = value;
					this.SendPropertyChanged("main_programID");
					this.Onmain_programChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_name", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string team_name
		{
			get
			{
				return this._team_name;
			}
			set
			{
				if ((this._team_name != value))
				{
					this.Onteam_nameChanging(value);
					this.SendPropertyChanging();
					this._team_name = value;
					this.SendPropertyChanged("team_name");
					this.Onteam_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pair_Grade", Storage="_Grades", ThisKey="pairID", OtherKey="pairID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pair_Performance", Storage="_Performances", ThisKey="pairID", OtherKey="pairID")]
		public EntitySet<Performance> Performances
		{
			get
			{
				return this._Performances;
			}
			set
			{
				this._Performances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dancer_Pair", Storage="_Dancer", ThisKey="dancer1ID", OtherKey="dancerID", IsForeignKey=true)]
		public Dancer Dancer
		{
			get
			{
				return this._Dancer.Entity;
			}
			set
			{
				Dancer previousValue = this._Dancer.Entity;
				if (((previousValue != value) 
							|| (this._Dancer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dancer.Entity = null;
						previousValue.Pairs.Remove(this);
					}
					this._Dancer.Entity = value;
					if ((value != null))
					{
						value.Pairs.Add(this);
						this._dancer1ID = value.dancerID;
					}
					else
					{
						this._dancer1ID = default(int);
					}
					this.SendPropertyChanged("Dancer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dancer_Pair1", Storage="_Dancer1", ThisKey="dancer2ID", OtherKey="dancerID", IsForeignKey=true)]
		public Dancer Dancer1
		{
			get
			{
				return this._Dancer1.Entity;
			}
			set
			{
				Dancer previousValue = this._Dancer1.Entity;
				if (((previousValue != value) 
							|| (this._Dancer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dancer1.Entity = null;
						previousValue.Pairs1.Remove(this);
					}
					this._Dancer1.Entity = value;
					if ((value != null))
					{
						value.Pairs1.Add(this);
						this._dancer2ID = value.dancerID;
					}
					else
					{
						this._dancer2ID = default(int);
					}
					this.SendPropertyChanged("Dancer1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Pair = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Pair = null;
		}
		
		private void attach_Performances(Performance entity)
		{
			this.SendPropertyChanging();
			entity.Pair = this;
		}
		
		private void detach_Performances(Performance entity)
		{
			this.SendPropertyChanging();
			entity.Pair = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Performance")]
	public partial class Performance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _performanceID;
		
		private int _pairID;
		
		private int _danceID;
		
		private System.TimeSpan _performance_time;
		
		private System.DateTime _performance_date;
		
		private System.Nullable<int> _grade;
		
		private EntitySet<Grade> _Grades;
		
		private EntityRef<Dance> _Dance;
		
		private EntityRef<Pair> _Pair;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnperformanceIDChanging(int value);
    partial void OnperformanceIDChanged();
    partial void OnpairIDChanging(int value);
    partial void OnpairIDChanged();
    partial void OndanceIDChanging(int value);
    partial void OndanceIDChanged();
    partial void Onperformance_timeChanging(System.TimeSpan value);
    partial void Onperformance_timeChanged();
    partial void Onperformance_dateChanging(System.DateTime value);
    partial void Onperformance_dateChanged();
    partial void OngradeChanging(System.Nullable<int> value);
    partial void OngradeChanged();
    #endregion
		
		public Performance()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Dance = default(EntityRef<Dance>);
			this._Pair = default(EntityRef<Pair>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_performanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int performanceID
		{
			get
			{
				return this._performanceID;
			}
			set
			{
				if ((this._performanceID != value))
				{
					this.OnperformanceIDChanging(value);
					this.SendPropertyChanging();
					this._performanceID = value;
					this.SendPropertyChanged("performanceID");
					this.OnperformanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pairID", DbType="Int NOT NULL")]
		public int pairID
		{
			get
			{
				return this._pairID;
			}
			set
			{
				if ((this._pairID != value))
				{
					if (this._Pair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpairIDChanging(value);
					this.SendPropertyChanging();
					this._pairID = value;
					this.SendPropertyChanged("pairID");
					this.OnpairIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_danceID", DbType="Int NOT NULL")]
		public int danceID
		{
			get
			{
				return this._danceID;
			}
			set
			{
				if ((this._danceID != value))
				{
					if (this._Dance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndanceIDChanging(value);
					this.SendPropertyChanging();
					this._danceID = value;
					this.SendPropertyChanged("danceID");
					this.OndanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_performance_time", DbType="Time NOT NULL")]
		public System.TimeSpan performance_time
		{
			get
			{
				return this._performance_time;
			}
			set
			{
				if ((this._performance_time != value))
				{
					this.Onperformance_timeChanging(value);
					this.SendPropertyChanging();
					this._performance_time = value;
					this.SendPropertyChanged("performance_time");
					this.Onperformance_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_performance_date", DbType="Date NOT NULL")]
		public System.DateTime performance_date
		{
			get
			{
				return this._performance_date;
			}
			set
			{
				if ((this._performance_date != value))
				{
					this.Onperformance_dateChanging(value);
					this.SendPropertyChanging();
					this._performance_date = value;
					this.SendPropertyChanged("performance_date");
					this.Onperformance_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Int")]
		public System.Nullable<int> grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this.OngradeChanging(value);
					this.SendPropertyChanging();
					this._grade = value;
					this.SendPropertyChanged("grade");
					this.OngradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Performance_Grade", Storage="_Grades", ThisKey="performanceID", OtherKey="performanceID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dance_Performance", Storage="_Dance", ThisKey="danceID", OtherKey="danceID", IsForeignKey=true)]
		public Dance Dance
		{
			get
			{
				return this._Dance.Entity;
			}
			set
			{
				Dance previousValue = this._Dance.Entity;
				if (((previousValue != value) 
							|| (this._Dance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dance.Entity = null;
						previousValue.Performances.Remove(this);
					}
					this._Dance.Entity = value;
					if ((value != null))
					{
						value.Performances.Add(this);
						this._danceID = value.danceID;
					}
					else
					{
						this._danceID = default(int);
					}
					this.SendPropertyChanged("Dance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pair_Performance", Storage="_Pair", ThisKey="pairID", OtherKey="pairID", IsForeignKey=true)]
		public Pair Pair
		{
			get
			{
				return this._Pair.Entity;
			}
			set
			{
				Pair previousValue = this._Pair.Entity;
				if (((previousValue != value) 
							|| (this._Pair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pair.Entity = null;
						previousValue.Performances.Remove(this);
					}
					this._Pair.Entity = value;
					if ((value != null))
					{
						value.Performances.Add(this);
						this._pairID = value.pairID;
					}
					else
					{
						this._pairID = default(int);
					}
					this.SendPropertyChanged("Pair");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Performance = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Performance = null;
		}
	}
}
#pragma warning restore 1591
